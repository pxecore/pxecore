//+build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"
	"strings"
	"text/template"
)

const (
	blobFileName string = "blob.go"
	embedFile    string = "./test.txt"
	// IPXESrcPath points to the IPXE source code base path.
	IPXESrcPath        string = "./ipxe/src"
	IPXEBiosBinPath    string = IPXESrcPath + "/src/bin/undionly.kpxe"
	IPXEEFIBinPath     string = IPXESrcPath + "/src/bin/ipxe.efi"
	IPXEBiosMakeTarget string = "bin-x86_64-efi/ipxe.efi"
	IPXEBiosMakeArgs   string = "EMBED=../../boot.ipxe"
)

// Define vars for build template
var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package ipxe

// Code generated by go generate; DO NOT EDIT.

func init() {
    file = []byte{ {{ conv . }} }
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func compileTemplate(ipxeBiosFile string, ipxeUEFIFile string) error {
	// Walking through embed directory
	config, err := ioutil.ReadFile(embedFile)
	if err != nil {
		// If file not reading
		log.Fatalf("Error reading %s: %s", embedFile, err)
	}

	// Create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, config); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
	return nil
}

func makeIPXEBinary(ipxeBasePath string) error {
	cmd := exec.Command("make", IPXEBiosMakeTarget, IPXEBiosMakeArgs)
	log.Print(cmd.String())
	cmd.Dir = ipxeBasePath
	out, err := cmd.Output()
	if err != nil {
		log.Print(string(out))
		return err
	}
	return nil
}

func main() {
	pwd, err := os.Getwd()
	if err != nil {
		log.Println(err)
	}
	fmt.Println(pwd)
	srcPath := path.Join(pwd, IPXESrcPath)
	fmt.Println(srcPath)

	err = makeIPXEBinary(srcPath)
	if err != nil {
		log.Fatal("Error building IPXE Binaries", err)
	}
}
