//+build ignore
// Compiles IPXE for regular Bios and UEFI and dumps the binary
// in blob.go file.
// 
// Triggered by: main.go
// Command: go generate ./...
//
// Based the godly article: https://github.com/koddr/example-embed-static-files-go

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"
	"strings"
	"text/template"
)

const (
	// InitScriptPath where the init script is.
	InitScriptFilename string = "init.sh"
	ScriptDir string = "./script"
	// BlobFileName where the files will be dumped.
	BlobFileName string = "blob.go"
	// IPXESrcPath points to the IPXE source code base path.
	IPXESrcPath        string = "./ipxe/src"
	// IPXEBios target information.
	IPXEBiosMakeTarget string = "bin/undionly.kpxe"
	IPXEBiosMakeArgs   string = "EMBED=../../script/boot.ipxe"
	// IPXEEFI target information.
	IPXEEFIMakeTarget string = "bin-x86_64-efi/ipxe.efi"
	IPXEEFIMakeArgs   string = "EMBED=../../script/boot.ipxe"
)

// templateVars stores the binary information for the embedded IPXEFiles
type templateVars struct {
	IPXEBiosBin []byte
	IPXEEFIBin  []byte
}

// Template static definition.
var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package ipxe

// Code generated by go generate; DO NOT EDIT.

func init() {
    ipxeBiosFile = []byte{ {{ conv .IPXEBiosBin }} }
	ipxeUEFIFile = []byte{ {{ conv .IPXEEFIBin }} }
}`),
)

// init cleans the IPXE source.
func init() {
	pwd, err := os.Getwd()
	if err != nil {
		log.Fatal("Error geting the base path", err)
	}

	cmd := exec.Command("sh", InitScriptFilename)
	cmd.Dir = path.Join(pwd, ScriptDir)
	log.Print("Running Command: ", cmd.String())
	out, err := cmd.Output()
	if err != nil {
		log.Fatal("Error in init(): ",string(out))
	}
}

// main complies the IPXE files and generates the blob.go file.
func main() {

	pwd, err := os.Getwd()
	if err != nil {
		log.Fatal("Error geting the base path", err)
	}

	log.Println("Base Generator Dir: ", pwd)
	srcPath := path.Join(pwd, IPXESrcPath)
	log.Println("Base IPXE Source Dir: ", srcPath)

	vars := new(templateVars)
	file, err := makeIPXEBinary(srcPath, IPXEBiosMakeTarget, IPXEBiosMakeArgs)
	if err != nil {
		log.Fatal("Error building IPXE Bios Binaries", err)
	}
	vars.IPXEBiosBin = file

	file, err = makeIPXEBinary(srcPath, IPXEEFIMakeTarget, IPXEEFIMakeArgs)
	if err != nil {
		log.Fatal("Error building IPXE EFI Binaries", err)
	}
	vars.IPXEEFIBin = file

	if err = writeBlobFile(vars); err != nil {
		log.Fatal("Error Building Blob File", err)
	}
}

// fmtByteSlice formats a byte array to string in order to be added into the template.
func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

// makeIPXEBinary builds IPXE in a particular target with a set of arguments.
func makeIPXEBinary(ipxeBasePath string, makeTarget string, makeArgs string) ([]byte, error) {
	cmd := exec.Command("make", makeTarget, makeArgs)
	log.Print("Running Command: ", cmd.String())
	cmd.Dir = ipxeBasePath
	out, err := cmd.Output()
	if err != nil {
		log.Print(string(out))
		return make([]byte,0), err
	}
	
	return ioutil.ReadFile(path.Join(ipxeBasePath, makeTarget))
}

// writeBlobFile compiles the template and saves it as a file.
func writeBlobFile(vars *templateVars) error{
	builder := &bytes.Buffer{}
	if err := tmpl.Execute(builder, vars); err != nil {
		return err
	}
	data, err := format.Source(builder.Bytes())
	if err != nil {
		return err
	}
	if err = ioutil.WriteFile(BlobFileName, data, os.ModePerm); err != nil {
		return err
	}
	return nil
}
