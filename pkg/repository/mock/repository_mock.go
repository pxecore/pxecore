// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/pxecore/pxecore/pkg/entity"
	repository "github.com/pxecore/pxecore/pkg/repository"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockRepository) Open(write bool) (repository.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", write)
	ret0, _ := ret[0].(repository.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockRepositoryMockRecorder) Open(write interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRepository)(nil).Open), write)
}

// Read mocks base method
func (m *MockRepository) Read(arg0 func(repository.Session) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockRepositoryMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockRepository) Write(arg0 func(repository.Session) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockRepositoryMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRepository)(nil).Write), arg0)
}

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// IsReadOnly mocks base method
func (m *MockSession) IsReadOnly() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadOnly indicates an expected call of IsReadOnly
func (mr *MockSessionMockRecorder) IsReadOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadOnly", reflect.TypeOf((*MockSession)(nil).IsReadOnly))
}

// IsOpen mocks base method
func (m *MockSession) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen
func (mr *MockSessionMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockSession)(nil).IsOpen))
}

// Host mocks base method
func (m *MockSession) Host() repository.HostRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(repository.HostRepository)
	return ret0
}

// Host indicates an expected call of Host
func (mr *MockSessionMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockSession)(nil).Host))
}

// MockHostRepository is a mock of HostRepository interface
type MockHostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHostRepositoryMockRecorder
}

// MockHostRepositoryMockRecorder is the mock recorder for MockHostRepository
type MockHostRepositoryMockRecorder struct {
	mock *MockHostRepository
}

// NewMockHostRepository creates a new mock instance
func NewMockHostRepository(ctrl *gomock.Controller) *MockHostRepository {
	mock := &MockHostRepository{ctrl: ctrl}
	mock.recorder = &MockHostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostRepository) EXPECT() *MockHostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHostRepository) Create(host entity.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockHostRepositoryMockRecorder) Create(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHostRepository)(nil).Create), host)
}

// Get mocks base method
func (m *MockHostRepository) Get(ID string) (entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ID)
	ret0, _ := ret[0].(entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHostRepositoryMockRecorder) Get(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHostRepository)(nil).Get), ID)
}

// FindByHardwareAddr mocks base method
func (m *MockHostRepository) FindByHardwareAddr(hardwareAddr string) (entity.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHardwareAddr", hardwareAddr)
	ret0, _ := ret[0].(entity.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHardwareAddr indicates an expected call of FindByHardwareAddr
func (mr *MockHostRepositoryMockRecorder) FindByHardwareAddr(hardwareAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHardwareAddr", reflect.TypeOf((*MockHostRepository)(nil).FindByHardwareAddr), hardwareAddr)
}

// Update mocks base method
func (m *MockHostRepository) Update(host entity.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockHostRepositoryMockRecorder) Update(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHostRepository)(nil).Update), host)
}

// Delete mocks base method
func (m *MockHostRepository) Delete(host entity.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockHostRepositoryMockRecorder) Delete(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHostRepository)(nil).Delete), host)
}
